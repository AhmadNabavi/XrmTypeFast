------------------------ Projcet Configurations ------------------------
>> Create project directory
>> Open it in VSCode
>> npm init
>> npm install typescript
>> Add src and dist directories to main directory -> Add index.ts file in src and index.ts file in dist
>> npx tsc -init

{
  "compilerOption": {
    "module": "es2016",
    "rootDir": "src",
    "sourceMap": true
  }
}

>> npm install webpack webpack-cli webpack-merge ts-loader --save-dev

1- webpack.dev.js
2- webpack.prod.js


For 1 paste:
-------------
const path = require('path');
const { merge } = require("webpack-merge");

module.exports = merge({
    entry: './src/index.ts',
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: "ts-loader",
                exclude: /node_modules/,
            },
        ],
    },
    resolve: {
        extensions: [".ts"],
    },
    output: {
        filename: 'index.js',
        path: path.resolve(__dirname, 'dist'),
        library: ["ClientJS"],
        libraryTarget: "var",
    },
}, {
    mode: "development",
    devtool: "eval-source-map"
});

For 2 paste:
-------------
const path = require('path');
const { merge } = require("webpack-merge");

module.exports = merge({
    entry: './src/index.ts',
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: "ts-loader",
                exclude: /node_modules/,
            },
        ],
    },
    resolve: {
        extensions: [".ts"],
    },
    output: {
        filename: 'index.js',
        path: path.resolve(__dirname, 'dist'),
        library: ["ClientJS"],
        libraryTarget: "var",
    },
}, {
    mode: "production"
});

>> In package.json file, replalce scripts with the following:
	"scripts": {
		"build": "npx webpack --config webpack.dev.js",
		"dist": "npx webpack --config webpack.prod.js"
	},

>> npm run-script build
   npm run-script dist
>> npm install --save-dev @types/xrm

------------------------ XrmTypeFast Configurations ------------------------
>> In the "Manage Nuget Packages" of your VS project, look for the folowing .dll and install it:
	XrmTypeExtraction

>> In App.config file of your VS project, add the following tags:
<appSettings>
	<add key="WebapiVersion" value="v9.1" />
</appSettings>

>> In VSCode: npm install xrmclientservice
>> Move XrmClientService to the "./src" folder, and within this file set the version of webApiVersion variable to your environment's version of Odata API:
	static webApiVersion: string = "v9.1";
